design_task:
  description: >
    Take the high level requirements described here and prepare a detailed design for the engineer;
    everything should be in 1 python module, but outline the classes and methods in the module.
    Here are the requirements: {requirements}
    IMPORTANT: Only output the design in markdown format, laying out in detail the classes and functions in the module, describing the functionality.
  expected_output: >
    A detailed design for the engineer, identifying the classes and functions in the module.
  agent: engineering_lead
  output_file: output/{module_name}_design.md

code_task:
  description: >
    Write a python module that implements the design described by the engineering lead, in order to achieve the requirements.
    Here are the requirements: {requirements}
  expected_output: >
    A python module that implements the design and achieves the requirements.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed.
  agent: backend_engineer
  context:
    - design_task
  output_file: output/{module_name}

frontend_task:
  description: >
    Create ReactJS/Redux app for {module_name} in output/react_app/ with full functionality.
    
    REQUIREMENTS: {requirements}
    
    Structure:
    - package.json: react ^18.2.0, react-dom ^18.2.0, react-scripts 5.0.1, redux ^4.2.1, react-redux ^8.1.3, @reduxjs/toolkit ^1.9.7, axios ^1.6.2
    - src/index.js: React 18 createRoot API, Redux Provider
    - src/App.jsx: 3 tabs (Account Management, Trading, Reports) matching Gradio exactly
    - src/components/: AccountManagement, Trading, Reports, AccountInfo, OperationResult
    - src/store/: Redux store with account slice (createSlice, configureStore)
    - src/api/backend.js: axios client connecting to https://huggingface.co/spaces/fareezaiahmed/trading-app-api
    - public/index.html: MUST include full HTML structure with DOCTYPE, html, head, body, and div id="root" (NOT empty!)
    
    CRITICAL:
    - Use Code Interpreter to create ALL files
    - NO placeholders - fully implement all reducers (createAccount, deposit, withdraw, buyShares, sellShares)
    - Test with npm install && npm run build before completing task
  expected_output: >
    A complete ReactJS/Redux app EXACTLY matching the Gradio implementation:
    - public/index.html must NOT be empty - must contain full HTML structure with div id="root"
    - 3 Tabs: Account Management, Trading, Reports (matching Gradio UI)
    - Tab 1: Create account, deposit, withdraw buttons with real-time feedback
    - Tab 2: Buy/Sell shares with real-time feedback
    - Tab 3: Portfolio value, profit/loss, holdings, transaction history buttons
    - Account Information display showing current state
    - Operation Result display for immediate user feedback
    - All functionality matches Gradio app exactly
    - package.json with redux, react-redux, @reduxjs/toolkit, axios
    - src/store/ with Redux store and slices
    - All components using Redux hooks for business logic
    - App must be buildable with 'npm install && npm run build'
    - App must be deployable as static files
  agent: frontend_engineer
  context:
    - code_task
  output_file: output/react_app_created.txt

backend_api_task:
  description: >
    Create a Flask backend API server for the React app.
    
    CRITICAL: Use Code Interpreter to create ALL files in output/api_server/ directory:
    
    STEP 1: Create directory structure using Code Interpreter:
    Run this Python code: os.makedirs('output/api_server', exist_ok=True)
    This MUST be executed in Code Interpreter to create the directory
    
    STEP 2: Create app.py file using Code Interpreter:
    Write to output/api_server/app.py with ALL endpoints implemented:
    - Use Flask with CORS enabled (from flask_cors import CORS)
    - Import the {module_name} module for business logic
    - Implement ALL endpoints:
      • POST /api/create_account - creates account, returns JSON
      • POST /api/deposit - deposits funds, returns JSON  
      • POST /api/withdraw - withdraws funds, returns JSON
      • POST /api/buy - buys shares, returns JSON
      • POST /api/sell - sells shares, returns JSON
      • GET /api/portfolio - returns portfolio data as JSON
    - Enable CORS to allow React app to call the API
    - Use jsonify for JSON responses
    - Handle errors properly with try/except
    - NO placeholder endpoints - implement them ALL
    
    STEP 3: Create requirements.txt:
    - flask
    - flask-cors
    - python-dotenv
    - huggingface_hub
    
    STEP 4: Create README.md for Hugging Face Space:
    - Include YAML frontmatter for HF Space
    - Set space type to 'gradio' 
    - Include app_file: app.py
    - Add description of the API
    - Note: This will be deployed as a Gradio app that serves the Flask API
    
    STEP 5: Create deploy_to_hf.py deployment script:
    - Load HF_TOKEN from .env using load_dotenv()
    - Use HfApi and create_repo, upload_file from huggingface_hub
    - Create space using create_repo with repo_id, repo_type='space', space_sdk='gradio'
    - Space name: fareezaiahmed/trading-app-api
    - Upload app.py (with Flask app that Gradio will host), requirements.txt, README.md
    - CRITICAL: Use create_repo NOT create_space (create_space doesn't exist in HfApi)
    
    CRITICAL: Execute this Python code in Code Interpreter to create ALL files:
    
    Python code template for deploy_to_hf.py deployment script content:
    from dotenv import load_dotenv
    from huggingface_hub import HfApi, create_repo, upload_file
    import os
    
    load_dotenv()
    HF_TOKEN = os.getenv('HF_TOKEN')
    
    api = HfApi(token=HF_TOKEN)
    repo_id = 'fareezaiahmed/trading-app-api'
    
    create_repo(repo_id=repo_id, repo_type='space', space_sdk='gradio', exist_ok=True, token=HF_TOKEN)
    
    upload_file(path_or_fileobj='app.py', path_in_repo='app.py', repo_id=repo_id, token=HF_TOKEN)
    upload_file(path_or_fileobj='requirements.txt', path_in_repo='requirements.txt', repo_id=repo_id, token=HF_TOKEN)
    upload_file(path_or_fileobj='README.md', path_in_repo='README.md', repo_id=repo_id, token=HF_TOKEN)
    
    CRITICAL: Use create_repo NOT create_space (create_space method doesn't exist in HfApi)
    Use exact parameters: create_repo(repo_id, repo_type='space', space_sdk='gradio', exist_ok=True, token=HF_TOKEN)
    
    Use Code Interpreter to execute file creation operations.
    IMPORTANT: Output ONLY raw Python code without any markdown.
    
    STEP 6: VERIFY FILES CREATED:
    After creating all files, verify the directory exists:
    - Check os.path.exists('output/api_server')
    - List files in directory to confirm app.py, requirements.txt, README.md, deploy_to_hf.py exist
    - Only mark task complete when all 4 files are confirmed present
    
    STEP 7: VERIFY THE CODE COMPILES AND RUNS:
    After creating all files, verify the code compiles and runs without errors:
    1. Test deploy_to_hf.py compiles:
       - Use importlib.util to load and validate the script
       - Check for syntax errors
    2. Test app.py imports correctly:
       - Change directory to output/api_server
       - Try to import app: from app import app
       - This verifies all imports (Flask, CORS, accounts module) work correctly
    3. If any import or syntax errors occur, FIX THEM before completing task
    4. Only mark task complete when all Python files compile successfully
    CRITICAL: All Python files must compile without errors or task is incomplete
    
  expected_output: >
    A complete Flask backend API server in output/api_server/ directory with ALL files created.
    All 6 API endpoints must be fully implemented with NO placeholders.
    Files verified: app.py, requirements.txt, README.md, deploy_to_hf.py - this will deploy the backend API as a Gradio app that serves the Flask API at https://huggingface.co/spaces/fareezaiahmed/trading-app-api
    Directory output/api_server/ must exist and be readable
  agent: backend_engineer
  context:
    - code_task
  output_file: output/api_server_created.txt

test_task:
  description: >
    Write unit tests for the given backend module {module_name} and create a test_{module_name} in the same directory as the backend module.
  expected_output: >
    A test_{module_name} module that tests the given backend module.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed.
  agent: test_engineer
  context:
    - code_task
  output_file: output/test_{module_name}


