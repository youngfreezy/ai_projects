design_task:
  description: >
    Take the high level requirements described here and prepare a detailed design for the engineer;
    everything should be in 1 python module, but outline the classes and methods in the module.
    Here are the requirements: {requirements}
    IMPORTANT: Only output the design in markdown format, laying out in detail the classes and functions in the module, describing the functionality.
  expected_output: >
    A detailed design for the engineer, identifying the classes and functions in the module.
  agent: engineering_lead
  output_file: output/{module_name}_design.md

code_task:
  description: >
    Write a python module that implements the design described by the engineering lead, in order to achieve the requirements.
    Here are the requirements: {requirements}
  expected_output: >
    A python module that implements the design and achieves the requirements.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed.
  agent: backend_engineer
  context:
    - design_task
  output_file: output/{module_name}

ux_design_task:
  description: >
    Prepare a UX design specification focusing on visual design, color schemes, user experience, and styling guidelines.
    Design must include modern professional styling with gradient backgrounds, card layouts, responsive design, and beautiful UI/UX.
    Here are the requirements: {requirements}
    Reference design template: src/engineering_team/config/ux_design.md
    IMPORTANT: Only output the visual design specifications in markdown format, focusing on colors, typography, spacing, animations, and overall aesthetic.
  expected_output: >
    A UX design specification focused on visual design, colors, typography, and user experience guidelines.
  agent: design_engineer
  output_file: output/{module_name}_ux_design.md

frontend_task:
  description: >
    Create a ReactJS/Redux app implementing the trading simulation platform.
    Here are the requirements: {requirements}
    
    CRITICAL: Follow the EXACT structure and patterns from src/engineering_team/config/frontend_design_template.md
    - Components: AccountManagement.jsx, Trading.jsx, Reports.jsx, AccountInfo.jsx, OperationResult.jsx
    - Redux: src/store/slices/accountSlice.js with createSlice from @reduxjs/toolkit
    - API: src/api/backend.js with baseURL pointing to https://huggingface.co/spaces/fareezaiahmed/trading-app-api
    - Bootstrap: Use Container, Row, Col, Form, Button, Tabs, Tab from react-bootstrap
    - Styling: Follow App.css patterns from the template
    
    CRITICAL IMPLEMENTATION STEPS:
    1. Use Code Interpreter to create directory: os.makedirs('output/react_app', exist_ok=True)
    2. Create public/index.html with full HTML structure and div id="root"
    3. Create package.json with ALL dependencies (React, Redux, Bootstrap, axios)
    4. Create src/index.js with Bootstrap CSS imports and React 18 createRoot
    5. Create src/index.css with global styles and gradient background
    6. Create src/App.jsx with Bootstrap Tabs, title header, and tab components
    7. Create src/App.css with ALL styling from design spec
    8. Create src/components/AccountManagement.jsx using Bootstrap Form/Button components
    9. Create src/components/Trading.jsx using Bootstrap Form/Button components
    10. Create src/components/Reports.jsx using Bootstrap layout components
    11. Create src/components/AccountInfo.jsx and OperationResult.jsx
    12. Create src/store/index.js with Redux store configuration using configureStore
    13. Create src/store/slices/accountSlice.js with ALL reducers including:
        - createAccount (sets user_id, balance, initialDeposit)
        - deposit (adds to balance, records transaction)
        - withdraw (subtracts from balance if sufficient, records transaction)
        - buyShares (uses get_share_price, updates balance and holdings)
        - sellShares (uses get_share_price, updates holdings and balance)
        - updatePortfolioValue (calculates total portfolio value)
        - updateProfitOrLoss (calculates profit/loss from initial deposit)
        - Initial state must include: user_id, balance, holdings, transactions, portfolioValue, profitOrLoss, initialDeposit
    14. Create src/api/backend.js with axios client pointing to: https://huggingface.co/spaces/fareezaiahmed/trading-app-api
    15. Verify all files exist and run: npm install && npm run build
  expected_output: >
    A complete ReactJS/Redux app that implements the frontend design and achieves the requirements.
    IMPORTANT: Output ALL code files, styles, and configuration following the frontend design specification exactly.
    All files must be valid and the app must build successfully with 'npm install && npm run build'.
  agent: frontend_engineer
  context:
    - code_task
  output_file: output/react_app_created.txt

backend_api_task:
  description: >
    Create a Flask backend API server for the trading simulation platform.
    Here are the requirements: {requirements}
    
    CRITICAL: Follow the EXACT structure and patterns from src/engineering_team/config/api_server_design_template.md
    - Endpoints: POST /api/create_account, POST /api/deposit, POST /api/withdraw, POST /api/buy, POST /api/sell, GET /api/portfolio
    - Files: app.py, requirements.txt, README.md, deploy_to_hf.py
    - Use absolute paths in deploy_to_hf.py (Path(__file__).parent.absolute())
    - baseURL in app.py must connect to Hugging Face space
    
    CRITICAL IMPLEMENTATION STEPS:
    1. Use Code Interpreter to create directory: os.makedirs('output/api_server', exist_ok=True)
    2. Create app.py with ALL 6 endpoints implemented (create_account, deposit, withdraw, buy, sell, portfolio)
    3. Create requirements.txt with all dependencies
    4. Create README.md with Hugging Face Space YAML frontmatter
    5. Create deploy_to_hf.py using absolute paths (Path(__file__).parent.absolute())
    6. Verify all files exist using os.path.exists() and list directory
    7. Test app.py imports: import importlib.util and verify syntax
    8. Test deploy_to_hf.py: verify it compiles without errors
    
    Use Code Interpreter to create ALL files in output/api_server/ directory as specified in the design.
  expected_output: >
    A complete Flask backend API server that implements the API server design and achieves the requirements.
    IMPORTANT: Output ALL code files following the design specification exactly.
    All files must be valid and the API must compile and import successfully.
    ALL 4 files must be created and verified: app.py, requirements.txt, README.md, deploy_to_hf.py
  agent: backend_engineer
  context:
    - code_task
  output_file: output/api_server_created.txt

test_task:
  description: >
    Write comprehensive unit tests for the backend module {module_name} and create test_{module_name} in output/ directory.
    Test all methods: createAccount, deposit, withdraw, buyShares, sellShares, calculatePortfolioValue, calculateProfitOrLoss.
    Verify error handling for insufficient funds, negative amounts, and invalid inputs.
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting, code block delimiters, or backticks.
    The output should be valid Python code that can be directly saved to a file and executed with pytest.
  expected_output: >
    A complete test module that thoroughly tests all functionality of the backend module with at least 80% code coverage.
    Test file must be directly executable and all tests must pass.
  agent: test_engineer
  context:
    - code_task
  output_file: output/test_{module_name}

test_api_server_task:
  description: >
    Write integration tests for the Flask API server to verify all endpoints work correctly.
    Test ALL 6 API endpoints: POST /api/create_account, POST /api/deposit, POST /api/withdraw, POST /api/buy, POST /api/sell, GET /api/portfolio
    Verify response formats, error handling, and CORS headers.
    Use pytest and requests library to test the running Flask app.
    Create test_api_server.py in output/ directory.
    
    CRITICAL IMPLEMENTATION STEPS:
    1. Import necessary libraries: pytest, requests, flask
    2. Create test fixtures for Flask test client
    3. Write tests for each endpoint with valid and invalid inputs
    4. Verify JSON responses, status codes, and error messages
    5. Test CORS headers are present
    6. Run tests and ensure all pass
    
    IMPORTANT: Output ONLY the raw Python code without any markdown formatting.
  expected_output: >
    A complete test_api_server.py file that tests all API endpoints and verifies responses, error handling, and CORS configuration.
    All tests must pass and provide at least 80% code coverage of the API endpoints.
  agent: test_engineer
  context:
    - code_task
    - backend_api_task
  output_file: output/test_api_server.py

test_frontend_task:
  description: >
    Write integration tests for the React/Redux frontend to verify components render and Redux state management works correctly.
    Test Redux reducers, component rendering, API integration, and user interactions.
    Use React Testing Library and Jest.
    Create test files alongside components in output/react_app/src/.
    
    CRITICAL IMPLEMENTATION STEPS:
    1. Install testing dependencies: @testing-library/react, @testing-library/jest-dom, @reduxjs/toolkit testing utilities
    2. Create test files: AccountManagement.test.jsx, Trading.test.jsx, Reports.test.jsx, accountSlice.test.js
    3. Test Redux reducers: verify state updates for createAccount, deposit, withdraw, buyShares, sellShares
    4. Test component rendering: verify components render without errors
    5. Test user interactions: form submissions, button clicks
    6. Test API integration: verify axios calls to backend
    7. Run tests with npm test and ensure all pass
    
    IMPORTANT: Output ONLY the raw test code without any markdown formatting.
  expected_output: >
    Complete test suite for React components and Redux state management with at least 70% code coverage.
    All tests must pass and verify Redux actions, reducers, component rendering, and API integration.
  agent: frontend_engineer
  context:
    - code_task
    - frontend_task
  output_file: output/test_frontend_created.txt


